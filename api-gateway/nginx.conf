worker_processes 1;

events { worker_connections 1024; }

http {
  # Define a single upstream group for all queue services
  upstream queue_services {
    server queue-service-1:3000 max_fails=3 fail_timeout=30s;
    server queue-service-2:3001 max_fails=3 fail_timeout=30s;
    server queue-service-3:3002 max_fails=3 fail_timeout=30s;
  }

  # Upstream for the JWT authentication service
  # upstream jwt_auth_service {
  #   server auth-service:4000;  # Replace with your actual JWT validation service
  # }

  server {
    listen 80;

    # Route all `/queue` traffic to the upstream group
    location /queue {
      # JWT authentication
      # auth_request /auth;
      # auth_request_set $auth_status $upstream_status;

      # # Add custom headers for authentication response
      # error_page 401 = /unauthorized;
      # error_page 403 = /forbidden;

      proxy_pass http://queue_services;

      # Set headers
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      # Handle unavailable upstream servers
      proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;

      # Timeouts
      proxy_connect_timeout 5s;
      proxy_send_timeout 10s;
      proxy_read_timeout 10s;
    }

    # JWT Authentication endpoint
    # location /auth {
    #   internal;
    #   proxy_pass http://jwt_auth_service;  # Call the authentication service
    #   proxy_set_header Content-Type application/json;
    #   proxy_set_header Authorization $http_authorization;  # Forward the Authorization header
    # }

    # # Error handling for unauthorized or forbidden requests
    # location = /unauthorized {
    #   return 401 '{"error":"Unauthorized"}';
    #   add_header Content-Type application/json;
    # }

    # location = /forbidden {
    #   return 403 '{"error":"Forbidden"}';
    #   add_header Content-Type application/json;
    # }
  }
}
